#!/usr/bin/python
import subprocess
import argparse
import os


parser = argparse.ArgumentParser()
parser.add_argument('--output_dir', action='store', dest='output_dir', help='Final output directory',
                    default='/root/work/DeepLearning/Project/Outputs/')
parser.add_argument('--data_file', action='store', dest='data_file', help='Input directory containing fibers to test',
                    default='/root/work/DeepLearning/Project/')
parser.add_argument('--checkpoint_dir', action='store', dest='checkpoint_dir', help='Path to restrore the model '
                                                                         'of the network (must be a .ckpt)',
                    default="/root/work/DeepLearning/Project/Data/CKPT/model3.ckpt")
parser.add_argument('--landmark_file', action='store', dest='landmark_file', help='Landmarks File .fcsv or .vt[k/p])',
                    default="")
parser.add_argument('--multiclass', action='store_true', dest='multiclass', help='Enable the multiclassification testing',
                    default=False)
parser.add_argument('--biclass', action='store_true', dest='biclass', help='Enable the biclassification testing',
                    default=False)
parser.add_argument('--summary_dir', action='store', dest='summary_dir', help='Summary directory ',
                    default="")
parser.add_argument('--fiber_name', action='store', dest='fiber_name', help='Name of the fiber for the biclassification case ',
                    default="Fiber")


def is_valid_multi_dir(directory):
	return False

def is_valid_bi_dir(directory):
	return False

def trafic_eval(data_file, output_dir, landmark_file, checkpoint_dir, summary_dir, multiclass, biclass, fiber_name):
	currentPath = os.path.dirname(os.path.abspath(__file__))
	env_dir = os.path.join(currentPath, "..", "miniconda2")
	pipeline_eval_py = os.path.join(currentPath, "PipelineEval.py")
	if multiclass:
		cmd_py = str(pipeline_eval_py) + ' --data_file ' + str(data_file) + ' --multiclass --summary_dir ' + str(summary_dir)+ ' --checkpoint_dir ' + str(checkpoint_dir) + ' --output_dir ' + str(output_dir) + ' --fiber_name ' + str(fiber_name) + ' --landmark_file ' + str(landmark_file)
	elif biclass:
		cmd_py = str(pipeline_eval_py) + ' --data_file ' + str(data_file) + ' --biclass --summary_dir ' + str(summary_dir)+ ' --checkpoint_dir ' + str(checkpoint_dir) + ' --output_dir ' + str(output_dir) + ' --fiber_name ' + str(fiber_name) + ' --landmark_file ' + str(landmark_file)
#	cmd_py = "/work/dprince/Trafic/TraficLib/tf_upgrape.py --infile /work/dprince/Trafic/TraficLib/runTraining.py  --outfile /work/dprince/Trafic/TraficLib/runTraining_2.py"
	cmd_virtenv = 'ENV_DIR="'+str(env_dir)+'";'
	cmd_virtenv = cmd_virtenv + 'export PYTHONPATH=$ENV_DIR/envs/env_trafic/lib/python2.7/site-packages:$ENV_DIR/lib/:$ENV_DIR/lib/python2.7/lib-dynload/:$ENV_DIR/lib/python2.7/:$ENV_DIR/lib/python2.7/site-packages/:$PYTHONPATH;'
	cmd_virtenv = cmd_virtenv + 'export PATH=$ENV_DIR/bin/:$PATH;'
	cmd_virtenv = cmd_virtenv + 'source activate env_trafic;'
	cmd_virtenv = cmd_virtenv + 'LD_LIBRARY_PATH=$ENV_DIR/envs/env_trafic/lib/libc6_2.17/lib/:$ENV_DIR/envs/env_trafic/lib/libc6_2.17/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH $ENV_DIR/envs/env_trafic/lib/libc6_2.17/lib/x86_64-linux-gnu/ld-2.17.so `which python` '
	cmd_pipeline_class = cmd_virtenv + str(cmd_py) + ';'
	print(cmd_pipeline_class)
	cmd = ["bash", "-c", str(cmd_pipeline_class)]
	out = open(os.path.join(currentPath,"Logs","classification_out.txt"), "wb")
	err = open(os.path.join(currentPath,"Logs","classification_err.txt"), "wb")
	subprocess.Popen(cmd, stdout=out, stderr=err)
	# print("\nout : " + str(o) + "\nerr : " + str(e))

	return

def main():
	args = parser.parse_args()
	output_dir = args.output_dir
	data_file = args.data_file
	checkpoint_dir = args.checkpoint_dir
	landmark_file = args.landmark_file
	multiclass = args.multiclass
	biclass = args.biclass
	summary_dir = args.summary_dir
	fiber_name = args.fiber_name

	# if multiclass==biclass:
		# raise Exception('Must choose one and only one type of training. Either Biclassification either Multiclassification.')
	# if multiclass and not is_valid_multi_dir(data_dir):
	# 	print("Architecture of directory not a valid multiclassification architecture. Must be like this:\n \
	# 		data_dir\n \
	# 		|==> 0\n \
	# 		|==> Arc_L_FT\n \
	# 		|==> Arc_L_FrontoParietal\n |==> Arc_L_TemporoParietal\n")
	# 	raise Exception('Error in the architecture of directory')

	# if biclass and not is_valid_bi_dir(data_dir):
	# 	raise Exception('Architecture of directory not a valid multiclassification architecture')

	trafic_eval(data_file, output_dir, landmark_file, checkpoint_dir, summary_dir, multiclass, biclass, fiber_name)
	return

if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        print ('ERROR, EXCEPTION CAUGHT')
        print str(e)
        import traceback
        traceback.print_exc()
