#!/usr/bin/python
import subprocess
import argparse
import os


parser = argparse.ArgumentParser()
parser.add_argument('--data_dir', action='store', dest='data_dir', help='Input directory ',
                    default="")
parser.add_argument('--checkpoint_dir', action='store', dest='checkpoint_dir', help='model checkpoints directory ',
                    default="")
parser.add_argument('--multiclass', action='store_true', dest='multiclass', help='Enable the multiclassification training',
                    default=True)
parser.add_argument('--biclass', action='store_true', dest='biclass', help='Enable the biclassification training',
                    default=False)
parser.add_argument('--lr', action='store', dest='lr', help='Learning rate for the training',
                    default='0.01')
parser.add_argument('--num_epochs', action='store', dest='num_epochs', help='Number of epochs during the training',
                    default='5')
parser.add_argument('--summary_dir', action='store', dest='summary_dir', help='Summary directory ',
                    default="")

def is_valid_multi_dir(directory):
	return False

def is_valid_bi_dir(directory):
	return False

def traffic_train(data_dir, num_epochs, lr, summary_dir, multiclass, biclass, checkpoint_dir):
	currentPath = os.path.dirname(os.path.abspath(__file__))
	env_dir = os.path.join(currentPath, "..", "miniconda2")
	pipeline_train_py = os.path.join(currentPath, "PipelineTrain.py")
	if multiclass:
		cmd_py = str(pipeline_train_py) + ' --data_dir ' + str(data_dir) + ' --multiclass --summary_dir ' + str(summary_dir)+ ' --checkpoint_dir ' + str(checkpoint_dir) + ' --lr ' + str(lr) + ' --num_epochs ' + str(num_epochs)
	elif biclass:
		cmd_py = str(pipeline_train_py) + ' --data_dir ' + str(data_dir) + ' --biclass --summary_dir ' + str(summary_dir)+ ' --checkpoint_dir ' + str(checkpoint_dir) + ' --lr ' + str(lr) + ' --num_epochs ' + str(num_epochs)
	cmd_virtenv = 'ENV_DIR="'+str(env_dir)+'";'
	cmd_virtenv = cmd_virtenv + 'export PYTHONPATH=$ENV_DIR/envs/env-tensorflow/lib/python2.7/site-packages:$ENV_DIR/lib/:$ENV_DIR/lib/python2.7/lib-dynload/:$ENV_DIR/lib/python2.7/:$ENV_DIR/lib/python2.7/site-packages/:$PYTHONPATH;'
	cmd_virtenv = cmd_virtenv + 'export PATH=$ENV_DIR/bin/:$PATH;'
	cmd_virtenv = cmd_virtenv + 'source activate env-tensorflow;'
	cmd_virtenv = cmd_virtenv + 'LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ENV_DIR/envs/env-tensorflow/lib/libc6_2.17/lib/:$ENV_DIR/envs/env-tensorflow/lib/libc6_2.17/lib/x86_64-linux-gnu $ENV_DIR/envs/env-tensorflow/lib/libc6_2.17/lib/x86_64-linux-gnu/ld-2.17.so `which python` '
	cmd_pipeline_train = cmd_virtenv + str(cmd_py) + ';'
	print(cmd_pipeline_train)
	cmd = ["bash", "-c", str(cmd_pipeline_train)]
	out, err = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
	print("\nout : " + str(out) + "\nerr : " + str(err))

	return

def main():
	args = parser.parse_args()
	lr = float(args.lr)
	num_epochs = int(args.num_epochs)
	data_dir = args.data_dir
	summary_dir = args.summary_dir
	multiclass = args.multiclass
	biclass = args.biclass
	checkpoint_dir = args.checkpoint_dir

	# if multiclass==biclass:
		# raise Exception('Must choose one and only one type of training. Either Biclassification either Multiclassification.')
	# if multiclass and not is_valid_multi_dir(data_dir):
	# 	print("Architecture of directory not a valid multiclassification architecture. Must be like this:\n \
	# 		data_dir\n \
	# 		|==> 0\n \
	# 		|==> Arc_L_FT\n \
	# 		|==> Arc_L_FrontoParietal\n |==> Arc_L_TemporoParietal\n")
	# 	raise Exception('Error in the architecture of directory')

	# if biclass and not is_valid_bi_dir(data_dir):
	# 	raise Exception('Architecture of directory not a valid multiclassification architecture')

	traffic_train(data_dir, num_epochs, lr, summary_dir, multiclass, biclass, checkpoint_dir)
	return

if __name__ == '__main__':
    try:
        main()
    except Exception, e:
        print ('ERROR, EXCEPTION CAUGHT')
        print str(e)
        import traceback
        traceback.print_exc()